CPU负载过高的排查

1 先通过top命令找到消耗cpu很高的进程id假设是123
2 执行top -p 123单独监控该进程
3 在第2步的监控界面输入H，获取当前进程下的所有线程信息
4 找到消耗cpu特别高的线程编号，假设是123
5 执行jstack 123456对当前的进程做dump，输出所有的线程信息
6 将第4步得到的线程编号11354转成16进制是0x7b
7 根据第6步得到的0x7b在第5步的线程信息里面去找对应线程内容
8 解读线程信息，定位具体代码位置

一般java应用cpu过高基本上原因是:
1.程序计算比较密集
2.程序死循环
3.程序逻请求堵塞
4.IO读写太高 

排查内存故障的方法和技巧有哪些：
1、top命令：Linux命令。可以查看实时的内存使用情况。  
2、jmap -histo:live [pid]，然后分析具体的对象数目和占用内存大小，从而定位代码。
3、jmap -dump:live,format=b,file=xxx.xxx [pid]，然后利用MAT工具分析是否存在内存泄漏等等。


- top -c #显示进程
- 大写P,按CPU使用率排序
- top -Hp pid  #显示进程的线程PID
- 大写P,排序
- printf "%x\n" pid  #将pid转化为16进制
- jstack PID|grep 0x`printf "%x" pid` -C5 --color #打印线程堆栈

ps -mp pid -o THREAD,tid,time命令查看该进程的线程情况


法2：
- jps -mlv #列出所有jvm进程
- top -Hp pid  #查看找出threadid
- threadid转成16进制tid  linux命令行下 >  printf "%x" num
- jstack tid | grep -A 100 取该线程栈信息的后100行，然后分析信息


法3：
top查看pid
ps -mp 22143 -o THREAD,tid,time|sort -k1 -nr|head -15  #查看线程
jstack -F pid >data.txt 即可把线程的堆栈信息统计到 文件中
根据线程id定位代码
echo "ibase=10;obase=16;22328"|bc

1）load average：此值反映了任务队列的平均长度；如果此值超过了CPU数量，则表示当前CPU数量不足以处理任务，负载过高
2）%us：用户CPU时间百分比；如果此值过高，可能是代码中存在死循环、或是频繁GC等
3）%sy：系统CPU时间百分比；如果此值过高，可能是系统线程竞争激烈，上下文切换过多，应当减少线程数
4）%wa：等待输入、输出CPU时间百分比；如果此值过高，说明系统IO速度过慢，CPU大部分时间都在等待IO完成
5）%hi：硬件中断CPU百分比；当硬件中断发生时，CPU会优先去处理硬件中断；比如，网卡接收数据会产生硬件中断
6）swap used：被使用的swap；此值过高代表系统因为内存不足在进行频繁的换入、换出操作，这样会影响效率，应增大内存量
7）%CPU：进程使用CPU的百分比；此值高表示CPU在进行无阻塞运算等


top、jstack定位进程和线程
jmap、jstat查看内存占用情况
跟踪和分析代码

===============================================================================
Linux系统负载的检查方法

System Load系统负载:
系统CPU忙闲的度量,多少进程等待CPU调度
Load average平均负载:
Load是计算机处理任务的度量,简单说就是进程队列的长度
一般是1分钟、5分钟、15分钟内平均load

影响负载的因素:
- 带宽Mbps
- 硬件配置,cpu频率和核心数,磁盘速度等
- 系统配置,系统最大打开文件描述符数,用户打开最大进程数,系统最大堆栈数,TCP内核参数等
- 应用服务器配置,如nginx的worker数量、keepalived timeout、worker_rlimit_nofile、upstream等
  MySQL和redis也会影响
- 程序逻辑:28原则,20%的功能带来80%的流量,负载均衡、缓存、分布式、流程拆分、异步化
- 系统架构: 负载均衡技术(4层和7层负载)

查看命令: w、uptime、top、cat /etc/procinfo

一般平均load要小于CPU数量
load可能是正在进行CPU密集型计算
load高可能只是需要运行的队列过长,任务可能是耗CPU的也可能是耗IO等

如何鉴别Load高:
确定是CPU不足还是IO问题还是内存不足

vmstat查看系统维度的负载:
vmstat 1 5
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 1  0      0 247528      0 1025028    0    0   344    17  577 1025  3  4 91  3  0

procs列:
r表示运行和等待cpu时间片的进程数,长期大于1说明cpu不足
b表示等待资源的进程数,如在等待IO或者内存交换

cpu列:
us显示用户方式下所花费CPU时间的百分比,us值高说明用户进程消耗CPU较高
sy显示内核进程所花费的CPU时间
id显示了CPU处于空闲状态的时间百分比
wa显示IO等待所占的CPU时间百分比

system列:
in表示在某一时间间隔中观测到的每秒设备中断数
cs表示每秒产生的上下文切换次数

memory列:
swpd切换到内存交换区的内存数量,
free当前空闲页面列表中的内存数量
buff是作为buff cache的内存数量,一般块设备的读写才需要缓冲
cache作为page cache的内存数量,一般作为文件系统的cache

swap列：
si由内存进入内存交换区的数量
so由内存交换区进入内存的数量

io列:
bi从块设备读取数据的总量
bo块设备写入数据的总量

------------------------------------------------------------------------------------
iostat查看磁盘负载:

----------------------------------------------------------------------------------
top查看进程维度的负载:
数字1打开或关闭显示所有cpu使用详情
字母l打开或关闭显示第一行
t开启或关闭第2行task和cpu显示
m打开和关闭mem和swap信号
N以pid大小顺序显示进程列表
P以CPU占用大小排序
M以内存占用率排序
k终止指定的进程
h显示帮助
q退出
s更新频率

ps -axjf  #查看是否存在 D 状态进程,查看进程及其之下的线程，通过stat查看是否存在D僵尸进程
D 状态是指不可中断的睡眠状态。该状态的进程无法被 kill，也无法自行退出。只能通过恢复其依赖的资源或者重启系统来解决

kswapd0 进程占用 CPU 较高，操作系统都用分页机制来管理物理内存，操作系统将磁盘的一部分划出来作为虚拟内存，
由于内存的速度要比磁盘快得多，所以操作系统要按照某种换页机制将不需要的页面换到磁盘中，将需要的页面调到内存中，
由于内存持续不足，这个换页动作持续进行，kswapd0是虚拟内存管理中负责换页的，当服务器内存不足的时候kswapd0会执行换页操作，
这个换页操作是十分消耗主机CPU资源的。如果通过top发现该进程持续处于非睡眠状态，且运行时间较长，
可以初步判定系统在持续的进行换页操作，可以将问题转向内存不足的原因来排查。
 

===========================================================================================
Java内存泄漏排查

1、内存溢出：申请10个字节的空间，但是向这个空间写入11或以上字节的数据，出现溢出。
2、内存泄漏：你用new申请了一块内存，后来很长时间都不再使用了（按理应该释放），但是因为一直被某个或某些实例所持有导致GC不能回收，也就是该被释放的对象没有释放。

实例:
java.lang.OutOfMemoryError，是指程序在申请内存时，没有足够的内存空间供其使用，出现OutOfMemoryError

分析:
JVM内存过小
程序不严密，产生了过多的垃圾

解决:
增加JVM内存大小, catalina.sh中的JAVA_OPTS
优化程序,避免死循环,及时释放没用的对象

Memory Leak是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存，迟早会被占光
Java中内存泄露就是存在一些被分配的对象:
- 这些对象是可达的,有向图中存在通路可以与其相连
- 对象是无用的,即程序以后不会再使用这些对象

满足以上条件就会为java中的内存泄露,这些对象不会被GC回收,耗费内存

- 内存泄露最终会导致内存溢出
- 内存泄漏可以通过完善代码避免
- 内存溢出可以通过调整配置来减少,但是无法彻底避免

排查案例:
jps找出运行的java进程
jps -l
ps aux|grep tomcat
jstat查看运行状态信息
jstat -gcutil pid 1000

jmap -histo:live pid  #生成堆转储快照

最后定位到代码









