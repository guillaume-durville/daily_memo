### k8s-YAML配置文件

1. YAML基础
YAML专门写配置文件的语言,使用比json更方便,实质上是通用的数据串行化格式
- 语法规则
大小写敏感
缩进表示层级关系
缩进时不允许使用tab,只能使用空格
缩进空格数不重要,只要同层级元素左侧对齐即可
'#'号表示注释


2. kubernetes中只需要了解两种结构类型: Lists和Maps
2.1 YAML Maps
Map指的是字典，即Key:Value键值对
---  #---为可选的分隔符，一个文件中定义多个结构的时候需要使用
apiVersion: v1
kind: Pod
metadata:
  name: kuber100-site
  labels:
    app: web

2.2 YAML Lists
List即是列表,数组
arg
  - beejing
  - nanjing
  - tianjing

对应json格式:
{
    "args": ["beijing","nanjing","tianjing"]
}

Lists的子项也可以是Maps，Maps的子项也可以是List
如:
---
apiVersion: v1
kind: Pod
metadata:
  name: kube100-site
  labels:
    app: web
spec:
  containers:
    - name: front-end
      image: nginx
      ports:
        - containerPort: 80
    - name: flaskapp-demo
      image: jcdemo/flaskapp
      ports: 8080

3. kubernetes配置文件YAML的注意事项
指定最新稳定版的API
应该存储在集群外的版本控制仓库中,可以快速回滚配置、重新创建和恢复
YAML比JSON更友好
可以将多个相关对象写在一个文件中,更易管理
没必要指定默认值,保持简单和最小配置
注释中说明一个对象描述更好维护

4. 使用YAML创建pod
---
apiVersion: v1
kind: Pod
metadata:
  name: kube100-site
  labels:
    app: web
spec:
  containers:
    - name: front-end
      image: nginx
      ports:
        - containerPort: 80
    - name: flaskapp-demo
      image: jcdemo/flaskapp
      ports:
        - containerPort: 5000


kubectl api-versions  #查看apiVersion
kubectl create -f test_pod.yaml 
kubectl get Pod

5. 创建Deployment
#test-pod 
apiVersion: v1      #指定api版本，此值必须在kubectl apiversion中   
kind: Pod           #指定创建资源的角色/类型   
metadata:           #资源的元数据/属性   
  name: test-pod    #资源的名字，在同一个namespace中必须唯一   
  labels:            #设定资源的标签 
    k8s-app: apache   
    version: v1   
    kubernetes.io/cluster-service: "true"   
  annotations:            #自定义注解列表   
    - name: String        #自定义注解名字   
spec:                     #specification of the resource content 指定该资源的内容   
  restartPolicy: Always   #表明该容器一直运行，默认k8s的策略，在此容器退出后，会立即创建一个相同的容器   
  nodeSelector:           #节点选择，先给主机打标签kubectl label nodes kube-node1 zone=node1   
    zone: node1   
  containers:   
  - name: test-pod          #容器的名字   
    image: 10.192.21.18:5000/test/chat:latest #容器使用的镜像地址   
    imagePullPolicy: Never  #三个选择Always、Never、IfNotPresent，每次启动时检查和更新（从registery）images的策略， 
                            # Always，每次都检查 
                            # Never，每次都不检查（不管本地是否有） 
                            # IfNotPresent，如果本地有就不检查，如果没有就拉取 
    command: ['sh']         #启动容器的运行命令，将覆盖容器中的Entrypoint,对应Dockefile中的ENTRYPOINT   
    args: ["$(str)"]        #启动容器的命令参数，对应Dockerfile中CMD参数   
    env:                    #指定容器中的环境变量   
    - name: str             #变量的名字   
      value: "/etc/run.sh"  #变量的值   
    resources:              #资源管理 
      requests:             #容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行   
        cpu: 0.1            #CPU资源（核数），两种方式，浮点数或者是整数+m，0.1=100m，最少值为0.001核（1m） 
        memory: 32Mi        #内存使用量   
      limits:               #资源限制   
        cpu: 0.5   
        memory: 1000Mi   
    ports:   
    - containerPort: 80     #容器开发对外的端口 
      name: httpd           #名称 
      protocol: TCP   
    livenessProbe:          #pod内容器健康检查的设置 
      httpGet:              #通过httpget检查健康，返回200-399之间，则认为容器正常   
        path: /             #URI地址   
        port: 80   
        #host: 127.0.0.1    #主机地址   
        scheme: HTTP   
      initialDelaySeconds: 180  #表明第一次检测在容器启动后多长时间后开始   
      timeoutSeconds: 5         #检测的超时时间   
      periodSeconds: 15         #检查间隔时间   
      #也可以用这种方法   
      #exec: 执行命令的方法进行监测，如果其退出码不为0，则认为容器正常   
      #  command:   
      #    - cat   
      #    - /tmp/health   
      #也可以用这种方法   
      #tcpSocket: //通过tcpSocket检查健康    
      #  port: number    
    lifecycle:          #生命周期管理   
      postStart:        #容器运行之前运行的任务   
        exec:   
          command:   
            - 'sh'   
            - 'yum upgrade -y'   
      preStop:          #容器关闭之前运行的任务   
        exec:   
          command: ['service httpd stop']   
    volumeMounts:       #挂载持久存储卷 
    - name: volume      #挂载设备的名字，与volumes[*].name 需要对应     
      mountPath: /data  #挂载到容器的某个路径下   
      readOnly: True   
  volumes:              #定义一组挂载设备   
  - name: volume        #定义一个挂载设备的名字   
    #emptyDir: {}   
    hostPath:   
      path: /opt        #挂载设备类型为hostPath，路径为宿主机下的/opt,这里设备类型支持很多种 
    #nfs 

- 创建一个Deployment的yaml
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.10
        ports:
        - containerPort: 80

kubectl create -f nginx-deployment.yaml 
kubectl get pod -o  wide
kubectl get deployment
kubectl get pod --show-labels
kubectl get pod -l app=nginx
kubectl describe rs nginx-deployment
kubectl describe pod nginx-deployment-6b7b4d57b4-26wzj

》滚动升级rollout
kubectl set image deploy/nginx-deployment nginx=nginx:1.11  #升级
kubectl exec -it nginx-deployment-b96c97dc-2pxjf sh
kubectl rollout status deploy/nginx-deployment  #查看发布状态
kubectl rollout history deploy/nginx-deployment #查看revision版本
kubectl rollout history deploy/nginx-deployment --revision=1
kubectl edit deploy/nginx-deployment  #编辑Deployment
kubectl rollout status deploy/nginx-deployment #查看升级过程
    Waiting for deployment "nginx-deployment" rollout to finish: 1 out of 3 new replicas have been updated...

》扩容/缩容
kubectl scale deploy/nginx-deployment --replicas=5

》创建Service提供对外访问的接口
apiVersion: v1
kind: Service
metadata:
  name: nginx-service   #服务名称
  labels:               #标签
    app: nginx
spec:
  ports:           #服务暴露的端口
  - port: 88
    targetPort: 80  #容器暴露的端口
  selector:         #关联的pod的标签
    app: nginx

kubectl create -f nginx-service.yaml
kubectl get svc/nginx-service
kubectl describe svc/nginx-service

kubectl rollout history deploy/nginx-deployment
kubectl rollout history deploy/nginx-deployment --revision=3
#回滚到上一个版本
#kubectl rollout undo deploy/nginx-deployment
#查看版本
#kubectl describe deploy/nginx-deployment
kubectl rollout undo deploy/nginx-deployment --to-revision=1

》创建资源模板的一些示例：
创建deployment资源模板
kubectl create deployment bb-dm --image=busyboxy --dry-run -o yaml > bb-dm.yml

创建sevice资源模板
kubectl create service clusterip bb-svc-cip --tcp=80:80 --dry-run -o yaml > bb-svc-cip.yml

创建serviceaccount资源模板
kubectl create serviceaccount vison --dry-run -o yaml > vison-sa.yml
