#### 04.Docker容器网络

1. ip netns命令使用
创建两个网络名称空间r1,r2
创建一对网卡veth1.1和veth1.2, veth1.1和veth1.2天然可以连接
可将veth1.1和veth1.2分别接入不同的netname,

```
yum install bridge-utils -y
yum install -y iproute
rpm -q iproute
ip netns help

ip netns add r1   #创建网络名称空间r1
ip netns add r2   #创建网络名称空间r2
ip netns list     #查看netnames

ip netns exec r1 ifconfig -a  #查看r1名称空间的网卡
ip netns exec r2 ifconfig -a


##创建虚拟网卡对
ip link add name veth1.1 type veth peer name veth1.2  #创建一对网卡veth1.1和veth1.2
ip link show  

ip link set dev veth1.2 netns r1  #将veth1.2加入到网络名称空间r1中
ip netns exec r1 ifconfig -a      #查看r1中的veth1.2网卡

ip netns exec r1 ip link set dev veth1.2 name eth0  #将r1中的veth1.2改名为eth0

ifconfig veth1.1 10.1.0.1/24 up  #激活宿主机上的veth1.1
ifconfig

ip netns exec r1 ifconfig eth0 10.1.0.2/24 up  #激活veth1.2,eth0
ping 10.1.0.2  #宿主机上ping eth0的IP

ip link set dev veth1.1 netns r2  #将veth1.1加入到网络名称空间r2中
ip netns exec r2 ifconfig veth1.1 10.1.0.3/24 up
ip netns exec r2 ifconfig
ip netns exec r2 ping 10.1.0.2  #r2网络名称空间内页可以ping通r1中的eth0
```

2. 容器自带4种不同的网络类型,用户也可以自己创建网络
Closed Container   封闭式,不设备网络设备
Bridged Container  桥接式;虚拟网络设备,一半在docker0桥上brctl,一半在容器上
Joined Container   联盟式;容器A有自己的网络名称空间,容器B共享A的网络名称空间
Open Container     开发式,共享宿主机的网络名称空间

2.1 bridge网络,通过veth连接宿主机上的桥上
容器的eth0->宿主机上vethxxx->docker0->宿主机eth0

docker run --name t1 -it --rm busybox:latest  #默认是bridged模式的
docker run --name t1 -it --network bridge --rm busybox:latest  #显式指定bridge网络

2.2 None网络,只有lo网络
docker run --name t1 -it --network none --rm busybox:latest  #无网络设备,封闭式容器

docker run --name t1 -it -h t1.jinmax.io --rm busybox:latest  #可注入主机名

docker run --name t1 -it -h t1.jinmax.io --dns 114.114.114.114 --dns-search ijinmax.io --rm busybox:latest
docker run --name t1 -it -h t1.jinmax.io \  #指定主机名
--dns 114.114.114.114 \     #指定dns
--dns-search ijinmax.io \   #指定搜索域
--add-host www.jinmax.com:1.2.3.4 \  #指定hosts解析
--rm busybox:latest

- 开放端口
docker run --name web1 -it -p 80 --rm nginx:latest  #指定容器端口映射到主机所有地址的一个动态端口
iptables -t nat -nvL #查看端口映射
docker port web1  #查看动态端口映射  80/tcp -> 0.0.0.0:32768
http://192.168.40.143:32768/

docker run --name web1 -it -p 80:80 --rm nginx:latest  #宿主机任意地址的80端都可以

docker run --name web1 -it -p 192.168.40.143:81:80 --rm nginx:latest  #指定宿主机IP和端口81映射到容器的80端口
80/tcp -> 192.168.40.143:81

docker run --name web2 -it -P --rm nginx:latest  #暴露所有端口

2.3 和其他容器共享网络
docker run --name b1 -it --rm busybox
docker run --name b2 --network container:b1 -it --rm busybox  #b2加入并共享b1的网络名称空间,IP相同

- 在b2中:
/ # echo "Max Awsome!!"> /tmp/index.html
/ # httpd -h /tmp/
/ # netstat -tnl

- 可以在b1中访问;
/ # wget -O - -q 127.0.0.1
Max Awsome!!

2.4 host网络,使用和主机相同的网络
docker run --name b2 -it --network host --rm busybox  #加入宿主机的网络namespace
/ # echo "MAX max max ....." > /tmp/index.html
/ # httpd -h /tmp
/ # netstat -tln
这样容器外部可以直接访问

- 修改docker0的地址
cat /etc/docker/daemon.json
{
  "registry-mirrors": ["https://registry.docker-cn.com"],
  "bip": "10.0.0.1/16",
  "hosts": ["tcp://0.0.0.0:2375","unix:///var/run/docker.sock"]
}

systemctl daemon-reload && systemctl restart docker
ifconfig docker0
ss -tnl

###报错,配置后和hosts冲突
vi /usr/lib/systemd/system/docker.service
ExecStart=/usr/bin/dockerd -H fd://  #删除-H后的

docker -H ip:port ps  #远程到其他主机查看容器

2.5 用户自定义网络
docker network create -d bridge --subnet "172.10.0.0/16" --gateway "172.10.0.1" mybr0
ip link set dev br-1d8344f9ecc5 name docker1

docker run --name t1 -it --net mybr0 busybox:latest
echo 1 > /proc/sys/net/ipv4/ip_forward

3. docker网络总结
docker network ls
docker network inspect bridge

3.1 自定义网络
桥接网络/Overlay网络/插件网络等
docker network create --driver bridge mynetwork
docker run -it --rm --name t5 --net mynetwork ubuntu

- 跨主机需要overlay网络,VXlan技术,借助libnetwork实现
需要kv服务存储相关主机信息,consul、etcd、zookeeper等

4. 常见的docker存储驱动
--storage-driver指定
AUFS、Devicemapper、Btrfs、ZFS
目前默认的是overlay2,工作在xfs文件系统上

5. 编写Dockerfile
vi .dockerignore
*/temp*   #忽略PATH路径下一级子目录中以temp开头的文件和目录,如PAHT/A/temp.txt
*/*/temp* #忽略PATH路径下二级子目录中以temp开头的文件和目录,如PATH/A/B/temp.txt
*.md
!README.md #忽略所有md文件,除了README.md

vi Dockerfile
FROM busybox:latest
LABEL maintainer=<dada> date=today

#shell方式
RUN source $HOME/.bashrc; \
	echo $HOME
#exec方式
RUN ["sh", "-c", "echo", "$HOME"]

#设置容器启动时的命令,CMD命令只有最后一条生效
CMD ["para1", "para2"]  #为ENTRYPOINT提供参数
	
#EXPOSE设置镜像暴露端口
EXPOSE 80 8088

#ENV设置环境变量,使用方式${变量名}时可以用${变量名:-default} ${变量名:+cover}设定默认值或者覆盖值 

#ADD复制文件到镜像,复制目录时仅复制目录下的文件;复制压缩文件时会自动解压为目录;目标文件不存在时则创建

#COPY指令

#ENRTYPOINT指令,设置容器入口程序
入口程序是容器启动时执行的程序,docker run中最后的命令将作为参数传递给入口程序 
入口程序有两种格式：exec、shell
其中shell使用/bin/sh -c运行入口程序,此时入口程序不能接收信号量 
通过shell方式启动入口程序时,会忽略CMD指令和docker run中的参数 

#VOLUME指令设置挂载点

#USER指定运行容器的用户或UID
#WORKDIR指令

#ARG指令设置编译变量
ARG从定义它的地方开始生效而不是调用的地方,在ARG之前调用编译变量总为空
在编译镜像时,可以通过docker build –build-arg < var>=< value>设置变量,如果var没有通过ARG定义则Daemon会报错

#ONBUILD指令
从该镜像生成子镜像,在子镜像的编译过程中,首先会执行父镜像中的ONBUILD指令,所有编译指令都可以成为钩子指令

#STOPSIGNAL 


- CMD ENTRYPOINT和RUN的区别:
RUN指令是设置编译build镜像时执行的脚本和程序,镜像编译完成后,RUN指令的生命周期结束
容器启动时,可以通过CMD和ENTRYPOINT设置启动项,其中CMD叫做容器默认启动命令,如果在docker run命令末尾添加command,则会替换镜像中CMD设置的启动程序	
ENRTYPOINT叫做入口程序,不能被docker run命令末尾的command替换,而是将command当作字符串,传递给ENTRYPOINT作为参数
	
- ONBUILD流程
编译时,读取所有ONBUILD镜像并记录下来,当前编译过程中不执行指令
生成镜像时将所有ONBUILD指令记录在镜像的配置文件OnBuild关键字中
子镜像在执行FROM指令时会读取基础镜像中的ONBUILD指令并顺序执行,如果执行过程中失败则编译中断；所有ONBUILD执行成功后开始执行子镜像中的指令
子镜像不会继承基础镜像中的ONBUILD指令

	
------------------------------------
Cloud native is a term used to describe container-based environments. 
Cloud-native technologies are used to develop applications built with services packaged in containers, 
deployed as microservices and managed on elastic infrastructure through agile DevOps processes and continuous delivery workflows

云原生是描述基于容器环境的术语,
云原生技术用于开发基于容器服务的应用程序
部署成为服务并由伸缩性架构管理通过敏捷开发

------------------------------------
- Linux Container(LXC)
- Docker

- 容器虚拟化的实现：基于Linux Namespaces来实现资源隔离：
1、主机名和域名 UTS  
内核版本：2.6.19  
系统调用参数：CLONE_NEWUTS

2、信号量、消息队列和共享内存 IPC-进程间通讯
内核版本：2.6.19
系统调用参数：CLONE_NEWIPC

3、进程编号 PID
内核版本：2.6.24 系统调用参数：CLONE_NEWPID

4、网络设备、网络栈和端口等 NETWORK
内核版本：2.6.29 系统调用参数：CLONE_NEWNET

5、挂载点(文件系统) MOUNT
内核版本：2.4.19
系统调用参数：CLONE_NEWNS

6、用户 USER
内核版本：3.8
系统调用参数：CLONE_NEWUSER

- 容器虚拟机化的实现：基于内核的Control Groups(Cgroups)来实现用户空间的资源分配:
把系统级的资源分成多个组,把每个组内的资源量分配到特定的用户空间上去

blkio:块设备IO 
cpu:CPU
cpuacct：CPU资源使用报告
cpuset：多处理器平台上的CPU集合
devices：设备访问
freezer：挂起或恢复任务
memory：内存用量及报告
perf_event:对cgroups中的任务进行统一性能测试
net_cls：cgroups中的任务创建的数据报文的类别标识符

-- Docker的网路
宿主机的docker0网卡,和容器网络是一样的

docker创建网络时,
× 创建一对虚拟接口
× 宿主机上创建一块名称如：180:veth30954c6@if179的网卡,并把它绑定到docker0网桥上
× 容器内部网卡名如：eth0@if180, 地址和docker0的地址网段相同,网关即为docker的IP

参数：
–net=bridge 		  #默认选项,用网桥的方式来连接docker容器
–net=host 		 	  #配置容器的独立网络栈
–net=container:容器名 #新建的容器使用已有容器的网络配置
–net=none 			  #新建的容器建立一个网络栈只有lo,所以只能访问本地网络,没有外网

-- 容器数据管理
数据卷volume
数据卷容器可以当作共享文件：
docker run -dit --name dbdata -v /linkface/dockerdir:/dbdata centos /bin/bash
docker run -dit --name db1 --volumes-from dbdata nginx:1.7 /bin/bash  #其他容器挂载相同路径

docker run --volumes-from dbdata -v $(pwd):/backup centos tar cvf /backup/backup.tar /dbdata  #实现容器数据备份

-- Dockerfile
#FROM指定基础镜像
FROM ubuntu:latest
#标签
LABEL maintainer="MAX<jinmeng260@gmail.com>"

#RUN指令,运行于镜像构建过程
RUN apt-get update && apt-get install -u nginx  #shell终端/bin/sh -c
#RUN ["apt-get, "update"]  #exec执行,可以指定shell;RUN ["/bin/sh","-c","apt-get, "update"] 

#启动容器时的命令,CMD只能指定一条(只有最后一条生效)
CMD /usr/sbin/nginx
CMD ["executeable","para1","para2"]
CMD ["para1","para2"]  #提供给ENTRYPOINT做参数

#EXPOSE 80 暴露端口
#ENV指令,环境变量会被其后的RUN使用
ENV VERSION=1.2
RUN curl -SL http://test.com/package-${VRSION}.tar.gz

#ADD指令,用于复制,源文件可以说目录、URL、TAR文件可以自动解压成目录
#COPY指令,不能使用URL,目标目录不存在时会自动创建

#ENRTYPOINT指令
#VOLUME指令

#USER指定运行容器的用户或UID

#WORKDIR指令,为后续的RUN、CMD、ENTRYPOINT配置工作目录

#ONBUILD指令,推荐在标签中注明,例如,ruby:1.9-onbuild
首先创建了image-a,并在其中使用了ONBUILD
ONBUILD ADD . /src/
接着from image-a创建image-b,就会自动执行上面

- 操作系统
POSIX可移植操作系统接口
GNU Hurd基于GNU Mach的守护进程
FreeBSD是类UNIX系统

- 创建支持ssh的镜像
docker run -dit --name conta_withssh ubuntu:14.04 /bin/bash
apt-get update && apt-get install openssh-server
service ssh start
netstat -lntp

vi run.sh
#!/bin/sh
/usr/sbin/sshd -D

chmod 755 run.sh

docker commit conta_withssh sshd:ubuntu


=============================================================================================
Docker架构: C/S
Docker Client->Docker Daemon->Image-Registry-Container

Image是分层使用Union File System
Container,最顶层是可写文件层RW


