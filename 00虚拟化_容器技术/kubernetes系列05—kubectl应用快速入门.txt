### kubernetes系列05—kubectl应用快速入门

1. 简单查询操作
kubectl decribe node node1
kubectl version

kubectl cluster-info

2. 运行一个容器
kubectl run nginx-deploy --image=nginx:1.14-alpine --port=80 --replicas=1
kubectl get pods
kubectl get deployment
kubectl get pods -o wide
ifconfig |head -2
curl 

3. 删除delete
通过配置文件名、stdin、资源名称或label选择器来删除资源。
支持JSON和YAML格式文件。可以只指定一种类型的参数：文件名、资源名称或label选择器

kubectl delete pods nginx-deploy-7689897d8d-b8kmg  #删除controller manager的pod会立即生成一个新的pod

4. expose暴露
将资源暴露为新的Kubernetes Service
指定deployment、service、replica set、replication controller或pod，并使用该资源的选择器作为指定端口上新服务的选择器
deployment 或 replica set只有当其选择器可转换为service支持的选择器时，即当选择器仅包含matchLabels组件时才会作为暴露新的Service。
资源包括(不区分大小写)：
pod（po），service（svc），replication controller（rc），deployment（deploy），replica set（rs）

kubectl expose deployment nginx-deploy --name=nginx --port=80 --target-port=80 --protocol=TCP
kubectl get svc

删除pod，立即生产新的pod，但是service还是不变，继续提供服务，只是指定到新的pod


5. scale动态扩容和缩容
扩容或缩容 Deployment、ReplicaSet、Replication Controller或 Job 中Pod数量。
scale也可以指定多个前提条件，如：当前副本数量或 --resource-version ，进行伸缩比例设置前，系统会先验证前提条件是否成立。

kubectl run myapp --image=ikubernetes/myapp:v1 --replicas=2
kubectl get deploy
kubectl get pods -o wide

kubectl expose deployment myapp --name=myapp --port=80
kubectl get svc myapp

curl --noproxy 10.244.0.157 10.244.0.157/hostname.html

- 使用scale,将pod扩容至5个
kubectl scale --replicas=5 deployment myapp  #scale up
kubectl scale --replicas=3 deployment myapp  #scale down

kubectl get pods


6. set动态升级版本
- set
配置应用资源。
使用这些命令能帮你更改现有应用资源一些信息。
子命令：image、resources、selector、subject

- set image
更新现有的资源对象的容器镜像。
可使用资源对象包括（不区分大小写）：
  pod (po)、replicationcontroller (rc)、deployment (deploy)、daemonset (ds)、job、replicaset (rs)

- 将镜像版本从v1升级到v2版
kubectl set image deployment myapp myapp=ikubernetes/myapp:v2
kubectl rollout status deployment myapp  #动态显示版本升级过程
kubectl get pods
# curl --noproxy 10.244.0.162 10.244.0.162
Hello MyApp | Version: v2 | <a href="hostname.html">Pod Name</a>

7. rollout undo回滚版本
- rollout
对资源进行管理
可用资源包括：deployments、daemonsets
子命令：history（查看历史版本）、pause（暂停资源）、resume（恢复暂停资源）、status（查看资源状态）、undo（回滚版本）

- rollout undo 回滚pod到之前的版本
kubectl rollout undo deployment myapp
kubectl get pods

# curl --noproxy 10.244.0.165 10.244.0.165
Hello MyApp | Version: v1 | <a href="hostname.html">Pod Name</a>

8. edit编辑修改
使用默认编辑器，编辑服务器上定义的资源。
使用命令行工具获取的任何资源都可以使用edit命令编辑。
edit命令会打开使用KUBE_EDITOR，GIT_EDITOR 或者EDITOR环境变量定义的编辑器，可以同时编辑多个资源，但所编辑过的资源只会一次性提交。
edit除命令参数外还接受文件名形式。
文件默认输出格式为YAML。要以JSON格式编辑，请指定“-o json”选项。
如果在更新资源时报错，将会在磁盘上创建一个临时文件来记录。
在更新资源时最常见的错误是几个用户同时使用编辑器更改服务器上资源，发生这种情况，你需要将你的更改应用到最新版本的资源上，或者更新保存的临时副本。

- 修改service，将类型type: ClusterIP，修改为type: NodePort；修改后，可以在集群外访问到pod中的服务
kubectl edit svc myapp

9. label标签
更新（增加、修改或删除）资源上的 label（标签）
label 必须以字母或数字开头，可以使用字母、数字、连字符、点和下划线，最长63个字符。
如果--overwrite 为 true，则可以覆盖已有的 label，否则尝试覆盖 label 将会报错。
如果指定了--resource-version，则更新将使用此资源版本，否则将使用现有的资源版本。

- 运行一个标签为app=nginx的pod
kubectl run nginx --image=nginx:1.14-alpine --replicas=1 --labels="app=nginx"
kubectl get pods --show-labels  #指定标签过滤
kubectl get pods --show-labels -l app

- 打标签
kubectl label pods nginx-6767df5b85-phkb2 release=canary
kubectl get pods --show-labels -l release

- 标签选择器
》等值关系： =、==、!=
kubectl get pods -l release --show-labels
kubectl get pods -l release=stable --show-labels
kubectl get pods -l release!=stable --show-labels

》集合关系：key in value、notin、key、!key
kubectl get pods -l "release in (stable,beta,alpha)"
kubectl get pods -l "release notin (stable,beta,alpha)"



