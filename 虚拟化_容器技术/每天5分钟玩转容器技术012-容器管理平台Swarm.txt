### Docker Swarm

1. Docker Swarm的概念
主机层面来看,Swarm管理的是Docker Host集群, 
Clustering集群化,服务器集群是由一组网络上相互连通的服务器组成,协同工作

Docker 1.12开始Swarm完全集成到Docker engine中
相比Kubernetes，Docker Swarm创建集群更简单，不需要额外软件,不需要额外配置

- Swarm
swarm运行Docker engine的多个主机组成的集群
当docker engine初始化一个swarm或者加入到一个存在Swarm中时,即启动了Swarm mode
运行swarm mode后,docker增加了编排service的能力

- Node
swarm中每个docker engine都是一个Node，分为：
> manager node：
manager node上执行部署命令,部署任务分配给worker node
负责编排和集群管理,保持维护swarm处于期望状态,多个manager时会选举一个leader

> worker node：
接受并执行manager派发的任务,默认manager node同时也是一个worker node,可以配置配置成 manager-only node
work node会定期向manager node报告自己的状态和正在执行的任务,manager则可以维护整个集群状态

- Service
定义worker node上要执行的任务,swarm主要编排任务就是保证service处于期望状态

2. 开始建立三个节点的swarm集群
- manager node上执行
docker swarm init --advertise-addr 192.168.56.101

docker node ls #查看当前swarm集群的node
docker swarm join --token .... IP:port  #在worker node上执行加入命令
docker swarm join-token worke #manager上可以查看添加worker的命令

3. 运行一个swarm的service
docker service create --name web_server httpd
docker service ls  #查看swarm中的service
docker service ps web_server  #可以查看service的每个副本

4. swarm实现service的伸缩
swarm manager上执行:
docker service scale web_server=5  #增加service的副本,scale up
docker service scale web_server=3 #scale down 到3个副本
docker servce ls
docker service ps

#默认情况下swarm manager也作为worker node,如果不希望manager运行service
docker node update --availability darin swarm-manager
docker node ls

5. swarm实现failover特性
swarm内置failover策略,swarm会努力实现期望状态,测试关闭一台worker node,service副本会调度到其他节点

6. 访问service
- 重新创建service
docker service rm web_server
docker servoce create --name web_server --replicas=2 httpd

- 外部访问service
docker service update --publish-add 8080:80 web_server #将service暴露到外部
docker service create --name web_server --publish 8080:80 --replicas=2 httpd

7. swarm的routing mesh
在访问任意节点8080端口时,swarm内部load balancer会将请求转发给web_server其中一个副本,这就是routing mesh

还可以配置一个外部的load balancer将请求路由到swarm service

- ingress网络
容器的网络与 --publish-add 之前已经大不一样了，现在有两块网卡，每块网卡连接不同的 Docker 网络
实际上：
    eth0 连接的是一个overlay类型的网络，名字为 ingress，其作用是让运行在不同主机上的容器可以相互通信
    eth1 连接的是一个bridge类型的网络，名字为 docker_gwbridge，其作用是让容器能够访问到外网

ingress网络是swarm创建时docker自动创建的,每个node都可以使用ingress
通过overlay网络，主机与容器、容器与容器间可以相互访问；routing mesh将外部请求路由到不同主机的容器，实现外部网络对service的访问

8. service之间的通信 
微服务架构的应用由service构成,service 运行了若干容器

- 服务发现service discovery
docker swarm原生自带这个功能,通过服务发现不需要知道service运行在哪里、IP、副本个数，就能与service通信

- 创建overlay网络
要使用服务发现,service必须属于同一个overlay网络,所以首先创建一个overlay网络
docker network create --driver overlay myapp_net

- 部署service到overlay
docker service create --name my_web --replicas=3 --network myapp_net httpd
docker service create --name util --network myapp_net busybox sleep 100000  #用于测试

- 验证
docker service ps util  #确认所在的worker node
在util容器中ping my_web,my_web会有一个VIP
docker exec util.1.bpon0vvbgve6lz3fp08sgana6 nslookup tasks.my_web  #查看每个副本的IP


9. swarm的滚动升级service
滚动更新降低了应用更新的风险，如果某个副本更新失败，整个更新将暂停，其他副本则可以继续提供服务
在更新的过程中，总是有副本在运行的，因此也保证了业务的连续性

- 创建service
docker service create --name my_web --replicas=3 httpd:2.2.31
docker service update --image httpd:2.2.31 my_web  #更新service至httpd:2.2.32

- swarm滚动更新的步骤:
》停止第一个副本
》调度任务,选择worker node
》在worker上用心的镜像启动副本
》副本容器运行成功则,继续更新下一个副本,失败则暂停整个更新

docker service ps  #查看更后的结果

docker service update --replicas 6 --update-parallelism 2 --update-delay 1m30s my_web  #指定更新副本数和滚动更新时间间隔
docker service inspect my_web #查看service当前配置
docker service ps my_web

回滚:
docker service update --rollback my_web  #回滚到上次更新之前,不能无限回滚

10. swarm存储数据
使用docker volume driver，外部storage provider管理和提供volume,docker主机volume挂载到各副本

- rex-ray方案
swarm所有节点都安装rex-ray,rex-ray使用virtualbox backend

- 实践
》创建service
docker service create --name my_web \
       --publish 8080:80 \
       --mount "type=volume,volume-driver=rexray,source=web_data,target=/usr/local/apache2/htdocs" \
       httpd

docker service ps my_web
docker service inspect my_web

》验证swarm数据持久性
>scale up
docker service update --replicas=2 my_web

>更新volume
>failover
shutdown 节点 swarm-worker1，过一会，所有副本都会迁移到 swarm-worker2

11. replicated mode和global mode
内部调度器则会根据当前集群的资源使用状况在不同node上启停容器，这就是service默认的replicated mode,一般资源更丰富的node运行的副本数更多

service还提供了一个global mode，其作用是强制在每个node上都运行一个且最多一个副本
此模式特别适合需要运行 daemon 的集群环境。比如要收集所有容器的日志

docker service create \
       --mode global \
       --name logspout \
       --mount type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock \
       gliderlabs/logspout

docker service inspect logspout #查看service的mode


12. Label控制service的位置
无论采用global mode还是replicated mode，副本运行在哪些节点都是由Swarm决定的

label可以灵活描述node的属性,形式是key=value，用户可以任意指定

- 指定node,swarm-worker1作为测试环境,swarm-worker2作为生产环境;添加label：env=test和env=prod
docker node update --label-add env=test swarm-worker1 
docker node update --label-add env=prod swarm-worker2

- 部署service到测试环境：
docker service create \
      --constraint node.labels.env==test \
      --replicas 3 \
      --name my_web \
      --publish 8080:80 \
      httpd

- 更新service，将其迁移到生产环境：
docker service update --constraint-rm node.labels.env==test my_web  
docker service update --constraint-add node.labels.env==prod my_web

- label 还可以跟 global 模式配合起来使用，比如只收集生产环境中容器的日志
docker service create \
       --mode global \
       --constraint node.labels.env==prod \
       --name logspout \
       --mount type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock \
       gliderlabs/logspout

这样只有swarm-worker2节点上才会运行logspout

13. 配置health check健康检查
执行docker run命令时，通常会根据Dockerfile的CMD或ENTRYPOINT启动一个进程，这个进程的状态就是docker ps STATUS列显示容器的状态
Docker支持的Health Check可以是任何一个单独的命令，Docker在容器中执行该命令，返回0容器被认为是healthy，返回1则为unhealthy
Docker默认只能通过容器进程的返回码判断容器的状态，Health Check则能够从业务角度判断应用是否发生故障，是否需要重启

curl --fail http://localhost:8080/ || exit 1 #对于http服务

- 例子
docker service create --name my_db \
       --health-cmd "curl --fail http://localhost:8091/pools || exit 1" \
       couchbase

--health-cmd Health Check 的命令，几个相关的参数：
    --timeout 命令超时的时间，默认30s
    --interval 命令执行的间隔时间，默认30s
    --retries 命令失败重试的次数，默认为3，如果 3 次都失败了则会将容器标记为 unhealthy,销毁并重建unhealthy的副本

14. 使用secret
docker swarm提供secret 机制，将敏感信息加密后保存到secret中，用户可以指定哪些容器可以使用此secret

- 使用secret启动MySQL容器
echo "PASSWD" |docker secret create my_secret_data -  #创建secret,my_secret_data将密码保存其中
docker service create --name mysql \
  --secret source=my_secret_data,target=mysql_root_password \
  -e MYSQL_ROOT_PASSWORD_FILE="/run/secrets/mysql_root_password" \  
  mysql:latest

创建secret和使用secret是分开完成的，其好处是将密码和容器解耦合

- secret使用场景, secret 可用于管理：
    用户名和密码
    TLS 证书
    SSH 秘钥
    其他小于500 KB的数据

- Secret 的安全性
在swarm中创建secret时，Docker通过TLS连接将加密后的secre 发送所属的manager节点
当secret被指定的service使用时，才会将解密后的secret以文件的形式mount到容器中，默认/run/secrets/<secret_name>

- 案例
》创建secret
openssl rand -base64 20 | docker secret create mysql_root_password - #生成随机密码
或者:
openssl rand -base64 20 > password.txt
docker secret create my_password ./password.txt

》创建一个单独的用户workpress，密码存放到secret mysql_password中
openssl rand -base64 20 | docker secret create mysql_password -

》创建自定义的overlay网络
docker network create -d overlay mysql_private  #不需将service暴露给外部网络

》创建MySQL service
docker service create \
     --name mysql \
     --network mysql_private \
     --secret source=mysql_root_password,target=mysql_root_password \
     --secret source=mysql_password,target=mysql_password \
     -e MYSQL_ROOT_PASSWORD_FILE="/run/secrets/mysql_root_password" \
     -e MYSQL_PASSWORD_FILE="/run/secrets/mysql_password" \
     -e MYSQL_USER="wordpress" \
     -e MYSQL_DATABASE="wordpress" \
     mysql:latest

#更多myqsl镜像环境变量参考https://hub.docker.com/_/mysql/

》创建WordPress Service
docker service create \
     --name wordpress \
     --network mysql_private \
     --publish 30000:80 \
     --secret source=mysql_password,target=wp_db_password \
     -e WORDPRESS_DB_HOST="mysql:3306" \
     -e WORDPRESS_DB_NAME="wordpress" \
     -e WORDPRESS_DB_USER="wordpress" \
     -e WORDPRESS_DB_PASSWORD_FILE="/run/secrets/wp_db_password" \
     wordpress:latest

#wordpress镜像环境变量更详细可参考 https://hub.docker.com/_/wordpress/

》验证wordpress
http://[swarm_master_ip]:30000/

15. Stack
一种更高效和可靠的方法来部署基于service的应用，这就是stack,stack 包含一系列 service，这些service组成了应用
stack通过YAML文件定义每个service，并描述service使用的资源和各种依赖

- WordPress的stack版本
YAML，完整列表和使用方法可参考文档 https://docs.docker.com/compose/compose-file/

- 定义好stack YAML就可以通过docker stack deploy来部署应用
docker stack rm 将相关资源清除

- stack的优势
将应用包含service,依赖secret、volume等资源,定义在yaml文件
》YAML描述服务的期待状态
》避免了重复命令易发生错误的
》可以向管理代码一样管理部署CaaS,代码即服务
YAML本质上将应用的部署代码化了，任何对应用部署环境的修改都可以通过修改 YAML 来实现

