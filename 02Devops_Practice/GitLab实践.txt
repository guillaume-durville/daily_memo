### 配置管理SCM

#### Gitlab的使用
首先安装
生产环境至少需要4G内存

yum install curl policycoreutils openssh-server openssh-clients policycoreutils-python
systemctl enable sshd
systemctl start sshd
yum install postfix
systemctl enable postfix
systemctl start postfix

cd /usr/local/src/
wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-11.2.3-ce.0.el7.x86_64.rpm
rpm -ivh gitlab-ce-11.2.3-ce.0.el7.x86_64.rpm 

vi /etc/gitlab/gitlab.rb
gitlab-ctl reconfigure


1. GitLab常用命令
gitlab-ctl start/restart/stop
gitlab-ctl reconfigure  #配置生效(/etc/gitlab/gitlab.rb)
gitlab-ctl show-config
gitlab-ctl uninstall
gitlab-ctl cleanse  #删除所有数据
gitlab-ctl tail ...


2. GitLab常用组件
nginx 静态web服务
gitlab-shell
gitlab-workhorse 轻量级反向代理服务器
logrotate  日志文件管理
postgresql 数据库
redis	   缓存数据库
sidekiq	   用于后台执行队列任务(异步执行)
unicorn	   GitLab Rails应用上托管这个服务上

- 基本目录
/var/opt/gitlab/git-data/repositories  库的默认存储
/opt/gitlab
/var/opt/gitlab #gitlab-ctl reconfigure命令编译后的应用数据和配置文件
/etc/gitlab  #配置文件目录
/var/log/gitlab #存放gitlab个组件产生的日志
/var/opt/gitlab/backups/   #备份文件生成的目录


3. GitLab的基本配置
- 关闭注册
- create group
- create user
- grant user
- add ssh-key 
- 初始化仓库


4. GitLab的高级使用
Milestone里程碑的目标计划
Issue and Issue tracker问题跟踪器;
- 阐述想法
- 提交功能建议
- 报告bug
merge request

5. GitLab CI
每次push到gitlab的时候,都会触发一个脚本执行,然后脚本包含的测试、编译、部署等一系列操作

- GitLab流程
Code提交commit-> CI Pipeline;Unit test(build,intrgration tests)
->CD Pipeline(Review > Staing > Production)
	
只要在仓库的根目录建立一个.gitlan-ci.yml文件,为该项目指派一个Runner
当有请求或push的时候就会触发build
yml文件定义了GitLab runner要做的操作,(Pipeline)默认3个stages：build、test、deploy

- GitLab-CI组件
  - GitLab-CI：GitLab自带的持续集成系统,
  - GitLab-Runner：是脚本执行的承载者,yml文件的script部分运行的就是由runner负责
  Runner可以安装到不同的机器上,不会影响GitLab的性能
	
- 安装GitLab+GitLab-Runner
  - 安装GitLab
  - 安装GitLab-Runnercd
	cd /usr/local/src/	
	wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ci-multi-runner/yum/el7/gitlab-ci-multi-runner-9.5.1-1.x86_64.rpm
	rpm -ivh gitlab-ci-multi-runner-9.5.1-1.x86_64.rpm

gitlab-ci-multi-runner register  #向GitLab-CI注册runner
http://ip #gitlab地址
dadad123dabngs1   #project的token
node1         #runner的描述
node1-runner  #runner标签
true
false
shell   #选择runner类型

gitlab-ci-multi-runner list
gitlab-ci-multi-runner start  #启动

- 编写gitlab-ci.yml
Pipeline：相当于一次构建任务,包含多个流程,如安装依赖、运行测试、编译、部署测试服务器、部署生产服务器等
Stages：表示构建的阶段,一个Pipeline可以有多个stages,stages按顺序执行,所有stage完成则pipeline成功
Jobs：表示构建工作,某个stage里执行的工作,stage可以定义多个jobs,相同stage的job会并行执行

- 格式：
#用stage关键字定义pipeline的构建阶段,非关键字定义job
#每个job中可以用stage关键字指定该job对应哪一个stage
#scipt关键字指定job要执行的命令
#定义stages
stages:
	- build
	- deploy
#定义job1
job1：
	stage: deploy
	script:
		- echo "this is job1"
		- scp web.tar.gz /tmp
		- pwd
#定义job2
	stage: build
	script:
		- echo "this is job2"
		- tar xcf web.tar.gz ./*
		

6. GitLab的备份
备份会包含所有库和附件的归档文件,对备份的恢复只能恢复到与备份时的gitlab相同的版本

配置文件中加入
gitlab_rails['backup_path'] = '/data/backup/gitlab'
gitlab_rails['backup_keep_time'] = 604800     #备份保留的时间（以秒为单位,这个是七天默认值）,

mkdir /data/backup/gitlab
chown -R git.git /data/backup/gitlab  #完成后执行
gitlab-ctl reconfigure

chown git.git /var/opt/gitlab/backups/1542603058_2018_11_19_11.4-ce_gitlab_backup.tar

  - 手动备份
  gitlab-rake gitlab:backup:create  #生成一次备份
  - 定时备份
  0 2 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1
  
  - 恢复：
  cd /data/backup/gitlab
  ll /var/opt/gitlab/backups/
  gitlab-ctl stop unicorn
  gitlab-ctl stop sidekiq
  gitlab-ctl status
  gitlab-rake gitlab:backup:restore BACKUP=1512811475_2017_12_09_10.2.2
  gitlab-ctl restart
  
  gitlab-rake gitlab:check SANITIZE=true
  






ssh-copy-id -i /root/.ssh/id_dsa.pub "-o StrictHostKeyChecking=no 172.16.1.31"
yum install sshpass -y
sshpass -p123456 ssh-copy-id -i /root/.ssh/id_dsa.pub 172.16.1.31 "-o StrictHostKeyChecking=no 172.16.1.31"




  