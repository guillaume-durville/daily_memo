1. Devops详解
Devops是一种方法论,包含一系列基本原则和实践,解决开发和运维之间的壁垒
Devops关注的不是工具本身,是一系列实践和原则
尽可能为公司提供更多的价值,让生产端更敏捷

因此让这一切实现自动化并不惜一切代价避免手工操作似乎是个好主意
环式部署,Deployment ring的概念

将敏捷扩展至生产端：
- DevOps的共存主要是为了扩展敏捷开发实践,进一步完善软件变更在构建、验证、部署、交付等阶段中的流动,
  同时通过软件应用程序的全面所有权予力跨职能团队完成从设计到生产支持等各环节的工作。
- DevOps鼓励软件开发者和IT运维人员之间所进行的沟通、协作、集成和自动化,借此有助于改善双方在交付软件过程中的速度和质量。
- DevOps团队更侧重于通过标准化开发环境和自动化交付流程改善交付工作的可预测性、效率、安全性,以及可维护性。
  理想情况下,DevOps可以为开发者提供更可控的生产环境,帮助他们更好地理解生产基础架构。
- DevOps鼓励团队自主进行自己应用程序的构建、验证、交付和支持。

Devops三大原则:
IaC: 基础框架即代码,版本控制、代码查阅、持续集成、自动化测试

Devops工具链:
编码-构建-测试-打包-发布-配置-监视：
>编码：代码开发和审阅,版本控制工具、代码合并工具
>构建：持续集成工具、构建状态统计工具
>测试：通过测试和结果确定绩效的工具
>打包：成品仓库、应用程序部署前暂存
>发布：变更管理、发布审批、发布自动化
>配置：基础架构配置和部署,基础架构即代码工具
>监视：应用程序性能监视、最终用户体验

Devops的收益:
可重复和可靠性、生产力、恢复时间、确保基础架构同质homogeneous、保持统一标准、开发者完成大部分工作

CD,持续交付
持续交付是指团队确保每个变更可以部署至生产环境,但也许并不需要实际部署,这通常可能是出于业务方面的原因
只有成功实现持续交付的前提下,才能进行持续部署

敏捷方法论强调的是功能提供给用户,并从用户得到尽量多的反馈

痴迷于度量是"精益创业Lean Startup"活动中的重要概念
响应时间、用户思考时间、展示次数、API调用次数、点击率

- 自动化
环境搭建和生产就绪的版本部署只需一键

更频繁的部署:
自动化测试、重构、数据库迁移、面向用户的产品规划、发布都尽量要更频繁
>随着要做的工作量逐渐增加,这些任务也会变的愈加困难,但如果能拆解为小块,则会变的相对容易些
>反馈,敏捷思维关注的是反馈环路,更好的学习和了解(极限编程Extreme Programming)
>实践,

small Changed = Less risk/ mastery of process
big Changed/a lot of code = Big risk

Devops鼓励尽可能频繁的交付,如QA环境中每天交付两次,交付时自动化的

- 持续交付前提条件
>对软件组件开发和平台供应和设置进行持续集成
>TDD,测试驱动开发
>代码审阅
>软件的持续审计Sonar
>生产环境实现功能测试的自动化
>更强大的非功能测试自动化(性能和可用性等)
>独立于标准环境的自动化打包和部署

- 0停机部署ZDD,在不中断现有服务的前提下部署新版系统
>功能开关Feature Flipping：
功能开关可供在软件运行过程中启用/禁用相应功能,

>摸黑启动Dark Launch:
目的在于通过生产环境进行负载模拟

>蓝/绿部署Blue/Green Deployment：
指的是为下一版本产品构建另一个完整的生产环境,开发和运维团队可以在这个单独的环境中放心的
构建下一版本产品,当下一版产品全部完成后,可以修改负载均衡器的配置,以透明的方式将用户自动重定向至新发布的下一版


>金丝雀发布Canari Release:
以增量的方式将用户切换至新的版本,随着越来越多的服务器从当前版本迁移至下一版,相同比例的用户也会被同时迁移
首先,只将少量服务器和少部分用户迁移至下一版,借此还可以在无须冒险影响所有用户的前提下对新版进行测试

- 协作:
如果没有培养出正确的文化,就算有最棒的工具,DevOps对你而言也不过是另一个热门词汇罢了
DevOps文化的主要特征在于开发和运维角色之间日益增加的协作

大部分方法论所要实现的最终目标总的来说可以通过两个C来实现：
协作（Collaboration）
沟通（Communication）

DevOps有助于促进IT的统一。开发和运维都需要明确,自己是统一业务流程的一份子。
DevOps思维确保了无论组织结构是怎样的,个体决策与行为需要尽力为统一的业务流程提供支持和促进作用

DevOps造成的最大挑战在于需要理解运维人员是软件的另一个用户群体,因此他们也应该被全面纳入软件开发流程中
预定的时间里,运维应该给出自己的非功能需求,就如同业务用户给出自己的功能需求一样
开发团队应该按照同等程度的重要性和优先级处理这种非功能需求
实现的过程中,运维应该持续提供反馈和非功能测试规范,就像业务用户针对功能特性提供反馈一样
采用DevOps方法,运维可以全面融入软件开发流程中

这就意味着他们必须将对方视作重要的利益相关者,并积极主动地寻求合作

DevOps实际上是向着大规模敏捷（Scaling Agility）迈出的另一步

当前DevOps概念的深入人心,离不开云计算、容器/Docker、微服务、敏捷等相关概念和实施的成熟发展
DevOps不仅需要打通开发运维之间的部门墙,我们认为DevOps更多的需要从应用的全生命周期考虑,
实现全生命周期的工具全链路打通与自动化、跨团队的线上协作能力


- 纵向集成
打通应用生命周期(需求、设计、开发、编译、构建、测试、打包、发布、配置、监控等)工具集成

- 横向集成
打通架构、开发、管理、运维等部门墙,横向集成强调重点是跨团队的协作

微服务架构开发应用和传统的SOA应用都应该可以开展devops
采用自动化工具本身不是DevOps,只有将这些工具与持续集成、持续交付、持续的反馈与优化进行端到端的整合时,这些工具才成为DevOps的一部分

实施DevOps需要从敏捷、持续、协作、系统性、自动化五个维度进行建设与改进
实施DevOps过程中,需要从组织、技术、流程三个维度进行持续的优化与改进


集成工具链：
打通应用应用开发工具链：需求、项目、代码、构建、测试、打包、发布、配置、监控；

基础设施即编码：
将基础环境服务化、可编程化,基础设施让项目团队可以自助获取；让基础设施从物理机、虚拟机、走向容器；

一键编译、测试、部署：开发人员可以从代码开始,一键获得可访问的环境,根据需要可以推送开发、测试、预发、生产环境；
ChatOps：开发以及运营人员在内的团队成员将沟通、工具和过程整合在一起的协作模型。基于对话驱动开发,将工具植入对话中,保障团队能够自动执行任务与协作。

看板：
在DevOps中不能仅仅把看板当做任务协调沟通的机制；把看板作为在制品管制平台,量化组织生产能力的工具

MVP最小可行产品:
采用MVP（最小可行产品）原则,快速拥抱变化。最短时间内快速交付产品原型,然后通过测试并收集用户的反馈,快速迭代,不断修正产品,最终适应市场的需求

发布：
建立持续发布机制,形成自动化、自助化两种能力,支持常见的灰度发布、金丝雀、蓝绿、回滚、A/B测试等

软件度量:
通过软件度量（包括过程度量、质量度量、用户度量、成本度量）,推算出组织的各种有效指标；
一则掌控组织的生产力水平,二则通过度量数据,反向优化组织瓶颈点

一切皆代码：
文档（用户故事、用户场景、功能特性等）、配置（应用配置、环境配置、脚本等）、环境（基础设施、中间件环境等）、发布包（二方库、三方库、部署包）
需要统一看待成代码,纳入版本管理,同时建立5者间的关系,提供全视角的链路追踪


Devops平台建设第一步,从角色、规划设计、开发交付、运营反馈四个维度梳理
以产品为核心,将代码、配置、环境管理同时覆盖产品生命周期

部署包=介质包+配置
环境分开发、测试、预发布、生产环境
检查点分为：过程的、安全的、性能的、业务的

- Devops框架支撑
软件产品管理
软件个阶段环境管理
质量的管理
部署包
二进制包的管理
资源管理
监控中心
认证中心等


- 每个领域按照AKF扩展立法体Y轴进行拆分,采用微服务架构模式进行平台设计

>Portal,提供用户使用的统一操作门户,包括用户管理、产品看板、产品生命周期管理等(设计、开发、测试、预发、生产、监控、故障处理等)
>IAM,身份识别和访问控制,提供用户身份识别和访问控制管理,用户管理、token管理和用户授权等
>SPM,软件产品管理,提供产品、组件和基准定义和管理,包括产品类型、产品管理、组件管理、依赖产品管理及产品投放市场等
>SCM,软件配置管理,提供产品、组件配置管理能力,包括配置项的定义和各个环境下的配置信息的管理维护能力
>SRM软件资源管理,提供产品和组件的自动编译、打包和部署能力,提供部署模板管理,支持编译和部署流程编排,编译和部署进度追踪及日志查看
>SEM软件环境管理,提供租户和产品环境资源配置、负载均衡以及运行容器的管理能力、包括租户可用资源配置
 基于租户资源的产品和组件在各环境下资源配置和负载均衡;容器创建、销毁、调度、复制及持久化卷管理能力
 
>QAF质量保证反馈,提供产品的质量管理和监控能力,包括测试用例管理、缺陷管理、质量监控等
>UMC统一运维中心,开源集成等,提供统一的监控、预警、故障处理能力,系统和业务日志管理,产品资源使用和运行情况监控等
>VCS版本控制,GitLab为核心,提供源代码库管理,代码库创建、维护、分支管理和用户权限管理等
>CI持续集成,以Jenkins为核心,使成为以API为使用方式的服务,提供持续集成任务调度和执行能力,集成任务管理、编译、打包等
>BPR二进制介质仓库,nexus为核心,提供二进制包仓库管理能力,包括二进制包、文档等编译产物的上传、下载存储访问等
>DPR可部署介质仓库,存储可部署的介质,注入的和环境相关的配置
>PM项目管理,可与常见的PM管理工具对接和集成,提供产品开发过程的管理和写作能力,任务计划、人员分工、过程跟踪和看板等
>MOC API模拟,REST API调用提供模拟能力,以便产品或组件在开发调试期间可以脱离依赖、减少阻塞、单独运行、支持根据Swagger
 和Mock数据发布Mock Rest Service,支持用户私有的MOCK数据
>DOC API文档,提供REST API/SPI文档自动生成能力
>TM租户管理,提供租户管理能力,租户管理、邀请码管理、租户配额等
>IM即时沟通,写作沟通的工具,支持群组聊天,离线消息推送,聊天记录等

- 逻辑架构
>基础设施层, IaaS, CaaS,分别基于Openstack、Kubernetes,docker
>基础服务层, 包括服务管理和调度,注册中心、编排、伸缩飘移;
>DevOps层, 流程(需求、设计、开发、测试、发布等)的串接,看板等

- 实施DevOps的价值
>组织团队上,每个团队小而自治,全栈、沟通、技能互补
>项目从原先线下写作、沟通统一到DevOps平台上写作沟通等,团队成员随时了解项目进展全貌
 平台可以做到各个过程数据的实时收集
>资源管理由原来的专职人员过度到开发人员自主化服务,按需实现各类环境申请和开通,基础设施提供数据支持
>从原来的邮件文化变成,DevOps平台统一沟通,


2. 持续集成、持续交付、持续部署CI/CD
软件开发周期中需要一些可以帮助开发者提升速度的自动化工具,这些工具的目的是促成软件项目的集成和交付
通过CI/CD工具,开发团队保持软件更新并迅速的投入实践中,CI/CD看作是敏捷开发的重要实践之一

- 持续集成CI
>自动化构建Build
源码编译成二进制,打包二进制码,运行自动化测试,生成文档,生成分发媒体.deb; .rpm; .msi文件
功能角度划分为: 
>>版本控制工具SCM, (SVN,git等)、
>>构建工具(Java开发中有Ant,Maven,Gradle);(php开发中有Phing,PHP-Maven插件完成PHP开发构建)、
>>CI服务器,主要有Jenkins、CruiseControl,GitLab-CI等

>自动化测试Test
Hudson、Jenkins配置,编写完整的测试用例,
单元测试、集成测试、系统测试、验收测试、性能测试等

>持续集成Intergration



- 持续交付CD
是一种软件工程手段,让软件在短时间内产出,确保随时可靠的发布
目的是更快、更频繁的构建、测试以及发布软件;通过加强生产环境的应用进行渐进式更新
可以降低交付成本和风险

- 持续部署
持续部署和持续交付的差异在于,持续部署将部署自动化了
在持续交付中,交付的目标是QA
在SaaS领域中,持续部署采用广泛,因为服务比较容易做到静默升级
持续部署的前提是自动化测试的覆盖率足够高
采用持续部署的好处是较少运维工作量,缩短新特性从开发到实际交付的周期

- Jenkins的介绍
Jenkins的特性:
>方便安装,jenkins.war部署到tomcat servlet容器中,不需要数据库支持
>方便配置,web界面配置
>集成RSS/Email,通过RSS发布构建结果和构建完成email通知
>生成Junit/TestNG测试报告
>分布式构建支持Jenkins能够让多台计算机一起构建/测试
>文件识别,Jenkins能够跟踪哪次构建生成哪些Jar,使用哪个版本jar等
>插件支持, 扩展插件,可以开发自己的工具

部署CI的基本要求是: 1.源代码仓库 2.包含构建脚本的项目

Jenkins的优点:
一切配置可以通过web界面配置,MAVEN_HOME和Email只需要配置一次,也可以通过XML文件配置
支持Maven的模块,每个Module可以配置成一个Job
测试报告聚合,所有的模块的测试报告都聚合在一起
构件指纹artfact fingerprint,每次build的结果构件都被很好的自动化管理,无需任何配置就可浏览下载

3. 微服务、DevOps、Cloud-native、系统部署; 蓝绿部署、AB 测试、灰度发布、滚动发布、红黑部署等概念
- 蓝绿部署Blue/Green Deployment：
热部署方式,这种部署方式安全可靠sliver bullet
蓝绿部署是最常见的一种0 downtime部署的方式
蓝绿部署原理上很简单,就是通过冗余来解决问题。
通常生产环境需要两组配置（蓝绿配置）,一组是active的生产环境的配置（绿配置）,一组是inactive的配置（蓝绿配置）
用户访问的时候,只会让用户访问active的服务器集群。在绿色环境（active）运行当前生产环境中的应用,也就是旧版本应用version1。
当你想要升级到version2 ,在蓝色环境（inactive）中进行操作,即部署新版本应用,并进行测试。
如果测试没问题,就可以把负载均衡器／反向代理／路由指向蓝色环境了。随后需要监测新版本应用,也就是version2 是否有故障和异常。
如果运行良好,就可以删除version1 使用的资源。如果运行出现了问题,可以通过负载均衡器指向快速回滚到绿色环境。

1) 部署版本1的应用（一开始的状态）,所有外部请求的流量都打到这个版本上
2) 部署版本2的应用,版本2的代码与版本1不同(新功能、Bug修复等)
3) 将流量从版本1切换到版本2
4) 如版本2测试正常,就删除版本1正在使用的资源（例如实例）,从此正式用版本2

蓝绿部署的弱点：
1、当切换到蓝色环境时,需要妥当处理未完成的业务和新的业务。如果数据库后端无法处理,会是一个比较麻烦的问题。
2、有可能会出现需要同时处理“微服务架构应用”和“传统架构应用”的情况,如果在蓝绿部署中协调不好这两者,还是有可能导致服务停止；
3、需要提前考虑数据库与应用部署同步迁移/回滚的问题。
4、蓝绿部署需要有基础设施支持。
5、在非隔离基础架构（ VM 、 Docker 等）上执行蓝绿部署,蓝色环境和绿色环境有被摧毁的风险。
6、另外,这种方式不好的地方还在于冗余产生的额外维护、配置的成本,以及服务器本身运行的开销。

- A/B 测试（A/B Testing）
A/B 测试跟蓝绿部署完全是两码事。A/B 测试是用来测试应用功能表现的方法,例如可用性、受欢迎程度、可见性等等。 
蓝绿部署的目的是安全稳定地发布新版本应用,并在必要时回滚。
A/B 测试与蓝绿部署的区别在于, A/B 测试目的在于通过科学的实验设计、采样样本代表性、流量分割与小流量测试等方式来获得具有代表性的实验结论,并确信该结论在推广到全部流量可信。
A/B 测试和蓝绿部署可以同时使用。



- 灰度发布／金丝雀发布
灰度发布是指在黑与白之间，能够平滑过渡的一种发布方式
灰度发布是增量发布的一种类型，灰度发布是在原有版本可用的情况下，同时部署一个新版本应用作为“金丝雀”（金丝雀对瓦斯极敏感，矿井工人携带金丝雀，以便及时发发现危险）
测试新版本的性能和表现，以保障整体系统稳定的情况下，尽早发现、调整问题。

灰度发布／金丝雀发布由以下几个步骤组成：
1、准备好部署各个阶段的工件，包括：构建工件，测试脚本，配置文件和部署清单文件。
2、从负载均衡列表中移除掉“金丝雀”服务器。
3、升级“金丝雀”应用（排掉原有流量并进行部署）。
4、对应用进行自动化测试。
5、将“金丝雀”服务器重新添加到负载均衡列表中（连通性和健康检查）。
6、如果“金丝雀”在线使用测试成功，升级剩余的其他服务器。（否则就回滚）

灰度发布可以保证整体系统的稳定，在初始灰度的时候就可以发现、调整问题，以保证其影响度。
灰度发布/金丝雀部署适用的场景：
1、不停止老版本，额外搞一套新版本，不同版本应用共存。
2、灰度发布中，常常按照用户设置路由权重，例如90%的用户维持使用老版本，10%的用户尝鲜新版本。
3、经常与A/B测试一起使用，用于测试选择多种方案。AB test就是一种灰度发布方式，让一部分用户继续用A，一部分用户开始用B，如果用户对B没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到B上面来。


- 滚动发布（rolling update）
滚动发布，一般是取出一个或者多个服务器停止服务，执行更新，并重新将其投入使用
周而复始，直到集群中所有的实例都更新成新版本。这种部署方式相对于蓝绿部署，更加节约资源——它不需要运行两个集群、两倍的实例数。
我们可以部分部署，例如每次只取出集群的20%进行升级。

这种方式也有很多缺点，例如：
(1) 没有一个确定OK的环境。使用蓝绿部署，我们能够清晰地知道老版本是OK的，而使用滚动发布，我们无法确定。
(2) 修改了现有的环境。
(3) 如果需要回滚，很困难。举个例子，在某一次发布中，我们需要更新100个实例，每次更新10个实例，每次部署需要5分钟。当滚动发布到第80个实例时，发现了问题，需要回滚。此时，脾气不好的程序猿很可能想掀桌子，因为回滚是一个痛苦，并且漫长的过程。
(4) 有的时候，我们还可能对系统进行动态伸缩，如果部署期间，系统自动扩容/缩容了，我们还需判断到底哪个节点使用的是哪个代码。
    尽管有一些自动化的运维工具，但是依然令人心惊胆战。

并不是说滚动发布不好，滚动发布也有它非常合适的场景。

- 红黑部署(Red-Black Deployment)
这是Netflix采用的部署手段，Netflix的主要基础设施是在AWS上，所以它利用AWS的特性，
在部署新的版本时，通过AutoScaling Group用包含新版本应用的AMI的Launch Configuration创建新的服务器。
测试不通过，找到问题原因后，直接干掉新生成的服务器以及Autoscaling Group就可以，测试通过，则将ELB指向新的服务器集群，然后销毁掉旧的服务器集群以及AutoScaling Group。

红黑部署的好处是服务始终在线，同时采用不可变部署的方式，也不像蓝绿部署一样得保持冗余的服务始终在线。


- 微服务架构






















