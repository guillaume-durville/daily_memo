# Linux基础知识总结

## 1.常见概念
1.1 包管理
yum RPM   Red Hat
apt DPKG  Ubuntu

1.2 VIM

1.3 GPL协议
- 任意运行程序,使用自由
- 复制自由
- 发布改进自由

1.4 磁盘
1.4.1 接口
- IDE(ATA), /dev/hda
- SATA, /dev/sda
- SCSI
- SAS

1.4.2 分区,分区表类型
- MBR分区, 446 bytes MBR + 64 bytes part table
分区表最多支持4个分区,主分区+扩展分区, 扩展分区只能有一个,扩展分区划分的分区叫逻辑分区
逻辑分区/dev/sd5开始

- GPT分区
GPT为兼容不同磁盘,定义扇区上使用逻辑区块地址LBA,默认大小512bytes
GPT第一个区块记录MBR,后33个区块用于备份分区信息,CRC32校验码
GPT没有扩展分区,支持4*32 128个分区
GPT支持更大的磁盘

1.4.2 开机检测程序
- BIOS基本输入输出系统,一个固件
BIOS是开机时第一个执行的程序,开机读取磁盘第一个扇区的MBR
MBR可以实现多重引导,只需将开机管理程序安装在分区启动扇区上

- UEFI
UEFI尅读取GPT分区表

1.5 文件系统
1.5.1 分区和文件系统
分区格式化基于分区的文件系统,

1.5.2 组成
- inode,一个文件暂用一个inode,记录文件的属性和文件所在block编号
存储曲线/onwer/容量/ctime/atime/mtime/flag/pointer

- block, 记录文件内容,可能会占用多个block
- super block, 记录文件系统整体信息,inode/block总量、使用量/剩余等
- block bitmap, 记录block是否被使用的位域

1.5.3 文件的读取
inode上先查找文件内容所在的block

1.5.4 磁盘碎片指的是文件内容在block上过于分散
1.5.5 挂载是指利用目录作为文件系统进入点
1.5.6 FHS规定了LInux的目录结构, /、/usr、 /var等

1.6 文件
属性/文件时间/操作

- 硬连接,inode都指向源文件所在block上,copy
软连接,符号链接保存源文件绝对路径,快捷方式

1.7 awk

NF 			每一行拥有的字段总数
NR 			目前所处理的是第几行数据
FS 			目前的分隔字符,默认是空格键

last -n 5 | awk '{print $1 "\t lines: " NR "\t columns: " NF}'
cat /etc/passwd | awk 'BEGIN {FS=":"} $3 < 10 {print $1 "\t " $3}'

1.8 压缩

## 2. bash
2.1 变量操作
- export 将自定义的变量转化为环境变量,环境变量可以在shell的子进程中使用
- declare用于声明变量,默认字符串类型
- 指令搜索的顺序：绝对路径-别名alias-内建指令-$PATH中的指定路径

2.2 重定向
> /dev/null
cmd > list 2>&1 #表示将stdout和stderr同时重定向到一个文件,2>&1(将2转化为1 stdout)

2.3 管道
cut
sort
uniq
tee #双向输出重定向,一个输出会同时传送到文件和屏幕上
tr #字符转换指令
col #将tab转化为空格字符
expand  #将tab转化为一定数量的空格
join
paste
split

## 3. 进程管理
3.1 查看进程
ps/top/pstree/netstat

3.2 孤儿进程
没有父进程的子进程,会被init接管

3.3 僵尸进程Z
子进程退出时,进程描述符没释放,当父进程wait()或waitpid()获取子进程信息后才释放
杀死父进程尽可消除僵尸进程

## 4. IO复用
4.1 I/O multiplexing事件驱动型IO,让单个进程具有处理多个IO事件能力
IO复用不需要进程线程创建和切换开销

4.2 IO模型
- 阻塞, 阻塞和非阻塞是等待I/O完成的方式,阻塞要求用户程序停止,知道IO完成
- 同步synchronous, 获知I/O完成的方式,需要时刻关心I/O是否完成,
- 异步asynchronoous, 异步不需要主动关心,会收到通知

4.2.1 同步阻塞
常见的模型,用户程序使用read()时会执行系统调用从而陷入内核,之后阻塞到系统调用完成
阻塞过程不消耗CPU时间

同步-非阻塞:
意味着用户程序在执行系统调用后还可以继续执行,内核不是马上执行完I/O,而是以一个错误码来告知
用户程序I/O还没完成,效率较低

异步:
I/O操作会立即返回,之后处理其他操作,I/O完成后会收到一个通知,此时会中断正在处理的操作,继续之前的
I/O多路复用的实现:
- select: 轮询
- poll
- epoll: 之运行在linux平台,有非常大量的描述符需要同时轮询,长连接

4.3 生产者消费者模式是可以通过一个容器来解决生产者和消费者的强耦合问题。
生产者和消费者彼此之间不直接通讯,而通过阻塞队列来进行通讯,所以生产者生产完数据之后不用等待消费者处理,直接扔给阻塞队列,
消费者不找生产者要数据,而是直接从阻塞队列里取,阻塞队列就相当于一个缓冲区,平衡了生产者和消费者的处理能力。
解决生产者/消费者问题的方法可分为两类：
- 1）采用某种机制保护生产者和消费者之间的同步；
- 2）在生产者和消费者之间建立一个管道。第一种方式有较高的效率,并且易于实现,代码的可控制性较好,属于常用的模式。
	第二种管道缓冲区不易控制,被传输数据对象不易于封装等,实用性不强
	
================================================================================

1. 进程和线程
1.1 线程
进程的执行的最小单位,是进程的一个实体,被系统独立调度和分派的基本单位,线程自己不拥有系统资源
和属于同一进程的其他线程共享进程的资源

- 易调度性
- 提高并发,进程可创建多个线程来执行同一个程序不同部分
- 开销少,创建线程比创建进程快,开销少
- 充分发挥多处理器功能,线程在不同处理器上运行,利用多核

线程的状态:
- new   刚创建为启动
- runable  正常运行中
- blocked	多个线程有同步操作的场景,
- waiting   线程有了某个锁后,调用wait方法
- timed_waiting  有限时间的waiting
- terminated   基本上等于死亡

1.2 进程
进程是操作系统的概念,进程是程序的执行过程
进程和程序的区别:
- 进程是程序的运行活动,属于动态概念,程序是静态的指令
- 进程可以执行一个多个程序
- 程序可以作为一个软件资源长期保持,进程是暂时的
- 进程能描述开发
- 进程由程序和数据组成,进程消耗计算机资源的基本单位
- 进程可以创建其他进程
- 进程还具有并发性和交往性

1.2.1 进程的状态
- 创建new; 分配和创建进程控制块表项,建立资源表格并分配资源,加载程序并建立地址空间表等
- 就绪ready; 已获得处理器外的资源
- 执行, 进程获得CPU开始执行
- 阻塞, 正在执行的进程由于某些事件(请求IO,申请缓冲等),暂时不继续执行
- 退出exit, 回收除进程控制块之外的其他资源 

1.2.2 作业(进程)调度算法
- FCFS 先来先服务
- 短作业优先SPF
- 优先权调度HPF
- 高相应比优先算法HRF
- 时间片轮转法RR
- 多机反馈队列调度算法

1.2.3 进程和线程的关系
- 一个线程只能属于一个进程,一个进程可以有多个线程
- 资源分配给进程,同一进程的所有线程共享该进程的资源
- 处理机分给线程,
- 线程在执行过程中,需要协作同步;不同进程间要利用消息通信的方法实现同步
	线程是进程的执行单位,也是进程内可调度实体
	
- 线程作为调度和分配的基本单位,进程作为拥有资源的基本单位
- 同一个进程下的多个线程之间也可以并发执行
- 进程拥有资源的独立单位,线程共享进程的资源
- 创建或撤销进程时,系统要为之分配和回收资源(内存IO等),进程切换时,涉及当前执行进程 CPU 环境的保存及新调度进程 CPU 环境的设置
   线程切换时只需保存和设置少量寄存器内容,开销很小
- 进程间通信有管道、信号量、消息队列、socket来维护,线程间通过通道、共享内存、信号等来进行通信

1.2.4 IPC通信方式
- 管道pipe
一种半双工的通信方式,数据只能单向流动,只能在亲缘关系的进程间使用, 管道是单向的、先进先出的、无结构的、固定大小的字节流,
它把一个进程的标准输出和另一个进程的标准输入连接在一起
  - 普通管道
  - 流管道
  - 命名管道
  
- 命名管道named pipe
半双工的通信方式,但是没有名字的限制,允许无亲缘的进程间的通信
mkfifo创建命名管道

- 信号量semphere
信号量是一个计数器,用来控制多个进程对共享资源的访问,锁机制;主要作为进程间以及同一个进程不同线程间同步

- 消息队列message queue
消息链表结构实现,存放在内核中由消息队列标识符标识,

- 信号signal
信号是一种比较复杂的通信方式,用于通知接受进程某个事件已经发生

- 共享内存shared memory
共享内存就是映射一段被其他进程所访问的内存,这段内存由一个进程创建但可以被多个进程访问
是最快的IPC方式,

- 套接字socket
用于不同机器间的进程通信

1.3 死锁的必要条件和处理死锁
- 互斥条件, 一个资源每次只能被一个进程使用
- 不可剥夺条件, 进程获得的资源,未使用完前不能被剥夺
- 请求和保持条件, 一个进程请求资源而阻塞时,保持不放资源
- 循环等待条件 , 进程间形成头尾相接的循环等待资源关系

死锁的避免: 银行家算法


2. 内存管理
2.1 分页存储管理
将程序的逻辑地址空间划分为固定大小的页page,物理内存划分为同样大小的页框page frame
或物理块(2的整数幂),程序加载时可将任意页放入内存中任意页框,实现了离散分配
逻辑地址到物理地址的原理: CPU中的内存管理单位MMU按逻辑页号通过查进程页表得到页框号
将物理页框号和页内地址相加形成物理地址


2.2 分段存储
用户程序地址空间分成若干个大小不等的段,每段可以定义一组相对完整的逻辑信息
存储分配时,以段为单位,段与段在内存中可以不相邻接,也实现了离散分配
在段式管理系统中,整个进程的地址空间是二维的,即其逻辑地址由段号和段内地址两部分组成

分页和分段的主要区别:
- 页是信息的物理单位,分页是为实现离散分配方式,以消减内存的外零头,提高内存的利用率；
	段则是信息的逻辑单位,它含有一组其意义相对完整的信息,分段的目的是为了能更好地满足用户的需要。

- 页的大小固定且由系统决定,由系统把逻辑地址划分为页号和页内地址两部分,是由机器硬件实现的,因而在系统中只能有一种大小的页面；
	而段的长度却不固定,决定于用户所编写的程序,通常由编译程序在对源程序进行编译时,根据信息的性质来划分。

- 分页的作业地址空间是一维的,即单一的线性地址空间,程序员只需利用一个记忆符,即可表示一个地址；
	而分段的作业地址空间则是二维的,程序员在标识一个地址是,即需给出段名,又需给出段内地址。

- 分页信息很难保护和共享、分段存储按逻辑存储所以容易实现对段的保存和共享。


2.3 段页式存储
段页存储管理方式综合了段式管理和页式管理的优点，但需要经过两级查表才能完成地址转换，消耗时间多。

2.4 虚拟内存
使得应用程序认为它拥有连续的可用的内存

虚拟地址：
指的是由程序产生的由段选择符和段内偏移地址两个部分组成的地址。
这两部分组成的地址并没有直接访问物理内存，而是要通过分段地址的变换机构处理或映射后才会对应到相应的物理内存地址。

逻辑地址：
指由程序产生的与段相关的偏移地址部分。不过有些资料是直接把逻辑地址当成虚拟地址，两者并没有明确的界限。

线性地址：
指的是虚拟地址到物理地址变换之间的中间层，是处理器可寻指的内存空间（称为线性地址空间）中的地址。
程序代码会产生逻辑地址，或者说是段中的偏移地址，加上相应段的基地址就生成了一个线性地址。
如果启用了分页机制，那么线性地址可以再经过变换产生物理地址。若是没有采用分页机制，那么线性地址就是物理地址。

物理地址：
指的是现在CPU外部地址总线上的寻址物理内存的地址信号

================================================================================

计算机网络

### 1. OSI开放系统互联草靠模型(标准模型)
1.1 物理层
设备上透明的传递原始比特流,定义了数据终端和数据通信设备的物理和逻辑连接方法
协议: Rj45、CLOCK、IEEE802.3
设备: 中继器、集线器

1.2 数据链路层
将网络层的传下来的IP数据报组装成帧,并检测和矫正物理层产生的传输差错, 帧、差错/流量/传输控制
协议: HDLC,PPP,STP,SDLC,CSMA(载波监听多路访问协议)
设备: 网桥、交换机

1.3 网络层
负责在网络层上将数据封装成数据报,将数据传到目的端,进行路由选择,通信服务
流量控制/拥塞控制/差错控制/网际互联等
协议； IP、ICMP、IGMP、ARP、RARP、OSPF(开放最短路径优先)、IPX
设备： 路由器

1.4 传输层
负责主机中进程间通信,端到端连接提供可靠的传输服务
协议: TCP、UDP

1.5 会话层
允许不同主机上各个进程间会话,利用传输层提供的端到端的服务,向表示层提供增值服务
主要为了表示层实体或用户进程建立连接并在连接上提供有序的传输数据
协议: SQL、RPC

1.6 表示层
用于处理两个通信系统中交换信息的表示方式, 数据压缩/加密解密等
协议: JEPG、MPEG、ASII

1.6 应用层
TCP/IP的最高层,直接为应用进程服务的一层
协议:  FTP 21、TELNET 23、SMTP 25、DNS 53、TFTP 69、HTTP、SNMP 161、DHCP

2. TCP/IP分层
2.1 网络接口层: OSI第1/2层
2.2 网际层: 寻址和对数据报的封装以及路由选择功能
2.3 传输层: 应用程序之间的端到端通信,
2.4 应用层: 第7层,直接为应用服务

3. OSI和TCP/IP的区别:
- OSI精确定义了服务、协议和接口
- OSI没有偏向任何特定的协议,通用性好
- TCP/IP考虑了异构网的互联问题,OSI只考虑一种标准的公用数据网将不同的系统互连
- OSI在网络层支持无连接和面向连接的通信,

4. 网络层



=============================
#### 5秒法则的定义是这样的：《5 SECOND RULE》,梅尔·罗宾斯（Mel Robbins）
如果你有一个冲动去做一个目标，你必须在 5 秒内移动你的身体去做，要不然的话你的大脑就会抹杀这个想法。
5-4-3-2-1 action !!! RIGHT NOW !!!