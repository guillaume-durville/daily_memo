1. Java线程池使用
1.1 线程池作用是限制系统执行线程的数量
队列无等待进程-->线程池一个资源等待-->新任务运行时-->

1.2 线程池优点:
减少了创建和销毁进程的次数,工作线程可以重复利用,可执行多个任务
可以根据系统能力,调整线程池线程数量,防止过度消耗内存

2. Java反射机制
反射: 指程序可以访问,检测和修改本身的状态或行为的能力

2.1 反射机制的作用:
- 反编译.class->.java
- 通过反射机制访问java对象的属性,方法,构造方法等

3. HTTP协议
3.1 hyper text transfer protocol超文本传输协议
用于从www服务器传输超文本到本地浏览器的传输协议
HTTP是应用层的协议,由请求request和相应response构成,标准的CS模型
HTTP是无状态协议,同一个客户端这次请求和上一请求没有关系

HTTP在TCP/TLS或SSL协议层之上(HTTPS),80/443

3.2 HTTP请求响应模型
永远是客户端发情请求,服务器响应 

3.3 工作流程
一个HTTP操作称为一个事务,
- 客户机与服务器建立连接(单击某个超链接)
- 连接建立后,客户机发送一个请求给服务器; 格式是
	URL,协议版本号,MIME信息(包括请求修饰符、客户机信息等)
- 服务器接到请求后,给予响应信息; 格式:
	协议版本号,成功或失败的代码,MIME信息(服务器信息,实体信息等内容)
	
3.4 1.0和1.1版本区别
HTTP/1.0每次请求都需要建立新的TCP连接,连接不可服用
HTTP/1.1的新请求可以在上次连接之上发送,连接可复用,效率高
HTTP/1.1在Request信息头里多一个Host域,1.0没有

- HTTP1.0要求不能生成第三种asctime格式的date/time stamp
HTTP1.1则要求只生成RFC 1123(第一种)格式的date/time stamp
  
- 状态响应码
HTTP/1.1中还增加了101、203、205
HTTP1.1增加了OPTIONS, PUT, DELETE, TRACE, CONNECT这些Request方法

请求格式:
请求行(请求行=方法 [空格] 请求URI [空格] 版本号 [回车换行]) #GET /index.html HTTP/1.1
通用信息头|请求头|实体头
CRLF(回车换行)
```
HTTP请求消息实例:
GET /hello.htm HTTP/1.1
Accept: */*
Accept-Language: zh-cn
Accept-Encoding: gzip, deflate
If-Modified-Since: Wed, 17 Oct 2007 02:15:55 GMT
If-None-Match: W/"158-1192587355000"
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)
Host: 192.168.2.162:8080
Connection: Keep-Alive
```
- HTTP相应消息的格式
状态行(状态行=版本号 [空格] 状态码 [空格] 原因 [回车换行]) #HTTP/1.0 200 OK
通用信息头|响应头|实体头
CRLF
实体内容
```
HTTP响应消息实例如下所示：
HTTP/1.1 200 OK
ETag: W/"158-1192590101000"
Last-Modified: Wed, 17 Oct 2007 03:01:41 GMT
Content-Type: text/html
Content-Length: 158
Date: Wed, 17 Oct 2007 03:01:59 GMT
Server: Apache-Coyote/1.1
```

3.5 状态码
1×× 请求收到,继续处理
2×× 操作成功收到,分析/接受
3×× 完成请求必须进行下一步处理
4×× 请求包含错误语法或不能完成
5×× 服务器执行一个有效请求失败

3.6 常用的请求方法
GET: 索取数据
POST: 提交数据的一种请求,要提交数据位于信息头后的实体中

3.7 cookie和session
cookie和session的设计是保存状态信息的,保存客户端状态的机制,为解决HTTP无状态问题
session可以用cookie技术实现,也可以用URL回写机制实现

- cookie将状态保存在客户端,session保存在服务器端
- cookie是服务器在本地机器上存储的小段文本并随每一个请求发送至服务器,浏览器解析cookie文件
- session针对每一个用户的,变量值保存在服务器上,sessionID区分用户
- 安全性来谈,session相对更安全些

3.8 缓存机制
web缓存机制cache位于web服务器和客户端之间,缓存会根据请求保存输出内容的副本,下一个请求
来到时,如果是相同的URL缓存直接使用副本相应请求,而不是再次发送请求
HTTP定义了相关的消息头可使web缓存尽可能好的工作

缓存的优点:
- 减少响应延迟
- 减少网络带宽消耗

3.9 https通信过程
HTTPS是以安全为目标的HTTP通道,HTTP基础上加入SSL层,端口443

3.9.1 HTTPS实现原理:
- 对称加密：密钥只有一个,加密解密同一个密码,速度快,DES,AES等
- 非对称加密: 密钥成对出现(公钥无法推知私钥),加解密使用不同密钥(公钥加密需要私钥解密)
相对对称加密速度较慢,非对称加密算法有RSA,DSA等

2.9.2 HTTPS通信的过程
```
	Client					Server
1. 请求https()连接--------->
	<-----返回证书(公钥)

2. 产生随机密钥
3. 使用公钥对密钥加密
4. 发送哦加密后的密钥()------>
5.通过对称密钥加密的秘闻通信-->

```

3.9.3 https特点:
- 客户端产生的密钥只有客户端和服务端能得到
- 加密的数据只有客户端和服务端能得到明文
- 客户端到服务端通信是安全的

3.10 http代理
代理服务器工作主要在OSI的会话层

3.10.1 http代理服务器的功能
- 突破自身IP访问限制,访问国外IP等
- 访问一些单位或团体内部资源
- 提高访问速度
- 隐藏真实IP

web浏览器--->请求--->代理-->web服务器

3.11 虚拟主机
虚拟主机使用同一个web服务器,apache/tomcat


4. Java虚拟机
4.1 Java虚拟机是虚拟硬件,处理器,堆栈,寄存器等
java虚拟机与平台无关性,java虚拟机使得java语言在不同平台不需要重新编程
java虚拟机执行字节码时,把字节码解释成具体平台的指令

4.2 java虚拟机的生命周期
程序执行虚拟机才运行,程序结束它就停止
java虚拟机开始于一个main()方法,这个方法有public返回void直接接收字符串数组
main()方法是程序的起点,程序的初始线程,程序的其它线程由他启动,
java中线程分为两种: 守护线程daemon和普通线程non-daemon
守护线程是java虚拟机自己使用,如负责垃圾回收
只要java虚拟机中还有普通线程在执行,java虚拟机就不会停止

4.3 java虚拟机体系结构
java虚拟机定义了一系列子系统,内存区域,数据类型和使用指南
每个java虚拟机都由一个类加载器子系统class loader subsystem负责加载程序中的类型
并赋予唯一的名字,每个java虚拟机都有一个执行引擎execution engine负责执行被加载类中的指令
程序执行需要一定的内存空间,如字节码,被加载类的额外信息,程序对象,方法的参数,返回值,本地变量
处理的中间变量等等,java虚拟机将这些信息保存在数据区data area
每个java虚拟机包含方法区method area和堆heap,被整个程序共享
当一个线程被创建时,会被分配只属于它自己的PC寄存器pc register(程序计数器)和java堆栈java stack

4.4 数据类型
java虚拟机中使用的数据都有确定的类型,数据类型和操作都在java虚拟机中严格定义
原始数据类型primitive types和引用数据类型reference type
引用数据类型依赖于实际的对象
java程序语言中的原始数据类型,都是java虚拟机的原始数据类型(除了boolean)
java源码编译成字节码时,使用int类型0表示布尔的false,非0表示True

引用类型可能被创建为,class type,interface type,array type
java虚拟机规范没有定义类型存储占用的空间,由实现者自己决定

4.5 字节长度

....
....
....


、



