1. Docker三剑客
1.1 Docker Machine
用来实现大规模主机环境的Docker批量、自动化安装
可以在多平台上快速安装Docker,短时间内搭建一套Docker主机集群

目前支持的以下的云服务商：
- Amazon EC2
- Microsoft Azure
- Digital Ocean
- Google GCE
- Openstack
- VMWare vSphere
- 等

docker-machine命令创建和管理大量Docker Hosts

1.2 Docker Compose
定义和运行多个Docker容器的应用,前身是Fig
Dockerfile
允许用户通过一个单独的docker-compose.yml模板文件来定义一组相关的应用容器为一个项目
compose的两个重要概念：
- 服务Service：一个应用容器
- 项目Project：一组关联的应用容器组成的完整业务单元


1.3 Docker Swarm
Swarm支持多个主机或服务器上创建容器集群服务,Swarm提供Docker容器集群服务
Swarm作为容器集群管理器,最大优势是100%支持标准Docker API,Docker本身就很容易和Swarm集成
方便了用户将单节点移植到Swarm上,同时Swarm内置了对Docker网络插件的支持,用户很容易
的部署跨主机容器集群服务

在V2中，集群会自动通过Raft协议分布式选举出manager节点，无需额外的发现服务支持，避免了单点瓶颈。
同时，V2中内置了基于DNS的负载均衡和对外部负载均衡机制的集成支持


2. Mesos
Mesos可以将整个数据中心的资源（包括CPU、内存、存储、网络等）进行抽象和调度，使得多个应用同时运行在集群中分享资源，
并无需关心资源的物理分布情况
如果把数据中心中的集群资源看做一台服务器，那么Mesos要做的事情，其实就是今天操作系统内核的职责：“抽象资源+调度任务”

Mesos可以被理解为容器云数据中心的操作系统或者容器云的云管平台


=================================================================================
Kubernetes的特性
- 自动打包
- 自我修复
- 横向缩放
- 服务发现和负载均衡
- 自动部署和回滚
- 密钥和配置管理
- 存储编排
- 批处理

https://kubernetes.io/zh/docs/tutorials/kubernetes-basics/

一.学习Kubernetes基础知识
1. 



--------------------------------------------------------------------------------
https://kubernetes.io/docs/tutorials/kubernetes-basics/create-cluster/cluster-intro/

1. 创建一个k8s集群
kubeadm或者minikube

kubectl version  #Kubectl uses the Kubernetes API to interact with the cluster
kubectl cluster-info
kubectl get nodes

2. deploy an app
用kubectl创建一个deployment
Once the application instances are created, a Kubernetes Deployment Controller continuously monitors those instances. 
If the Node hosting an instance goes down or is deleted, the Deployment controller replaces the instance with an instance on another Node in the cluster
deployment指挥kubernetes创建和更新应用实例
deployment的controller会持续监控这个deployment的应用,可以自愈

kubectl get nodes
kubectl run kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1 --port=8080 #用deployment部署一个app,需要制定镜像和deployment的name和expose的端口

kubectl get deployments
kubectl proxy #查看这个app,暴露给集群外
curl http://localhost:8001/version

3. Exploring Your App
A Pod is a Kubernetes abstraction that represents a group of one or more application containers (such as Docker or rkt), 
and some shared resources for those containers. 
The containers in a Pod share an IP Address and port space, are always co-located and co-scheduled, 
and run in a shared context on the same Node.
Pods are the atomic unit on the Kubernetes platform. 

When we create a Deployment on Kubernetes, that Deployment creates Pods with containers inside them (as opposed to creating containers directly). 

kubectl describe pods
kubectl proxy
curl http://localhost:8001/api/v1/namespaces/default/pods/kubernetes-bootcamp-5b48cfdcbd-sxqph/proxy/
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-5b48cfdcbd-sxqph | v=1

kubectl logs kubernetes-bootcamp-5b48cfdcbd-sxqph
kubectl exec kubernetes-bootcamp-5b48cfdcbd-sxqph env  #list the env variables
kubectl exec -it kubernetes-bootcamp-5b48cfdcbd-sxqph bash  #start a bash session in the pod container
exit  #退出container

4. Exposing your app publicly,用service来expose应用
pod是有生命周期的
A ReplicaSet might then dynamically drive the cluster back to desired state via creation of new Pods to keep your application running. 
A Service in Kubernetes is an abstraction which defines a logical set of Pods and a policy by which to access them. 
The set of Pods targeted by a Service is usually determined by a LabelSelector 

Service type：
- ClusterIP(默认的),暴露service在集群的内部IP
- NodePort,Service accessible from outside the cluster using <NodeIP>:<NodePort>
- LoadBalancer,创建一个外部的负载均衡器
- ExternalName,Exposes the Service using an arbitrary name (specified by externalName in the spec) by returning a CNAME record with the name. 

Services are the abstraction that allow pods to die and replicate in Kubernetes without impacting your application


kubectl get services  
kubectl expose deployment/kubernetes-bootcamp --type="NodePort" --port 8080 #创建一个service
kubectl describe services/kubernetes-bootcamp  #Nodeport是60781/TCP

unset http_proxy;curl 127.0.0.1:60781
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-5b48cfdcbd-sxqph | v=1

#使用label
kubectl get pods -l run=kubernetes-bootcamp  #用label列出pod
kubectl get services -l run=kubernetes-bootcamp  #用label列出service

kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' #获取pod name
kubectl label pod kubernetes-bootcamp-5b48cfdcbd-sxqph app=v1  #给pod打label
kubectl describe pod/kubernetes-bootcamp-5b48cfdcbd-sxqph
kubectl get pods -l app=v1  #查看label为app=v1的pod
kubectl delete services -l run=kubernetes-bootcamp  #删除service

5. 扩展应用,运行多个实例应用Scale up app
Scaling is accomplished by changing the number of replicas in a Deployment
增加replicas的数量实现横向扩容 Kubernetes also supports autoscaling of Pods

kubectl scale deployments/kubernetes-bootcamp --replicas=4  #扩容至4
kubectl get deployments
kubectl get pods -o wide
kubectl describe deployments/kubernetes-bootcamp
kubectl describe services/kubernetes-bootcamp

curl 127.0.0.1:60781  #多次执行可以看到service的负载均衡可用,每次访问不同的pod
kubectl scale deployments/kubernetes-bootcamp --replicas=2  #缩容至2个replica
kubectl get pods -o wide  #查看pod数量

6. 滚动升级rolling update
Rolling updates allow Deployments' update to take place with zero downtime by incrementally updating Pods instances with new ones
滚动更新支持:
- 升级应用环境
- 回滚到之前版本
- 实现不停机的持续集成和持续交付 

kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v2 #指定image升级
kubectl describe services/kubernetes-bootcamp
kubectl rollout status deployments/kubernetes-bootcamp  #确认rollout
kubectl describe pods

kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v10  #模拟升级有问题的版本
kubectl rollout undo deployments/kubernetes-bootcamp  #undo之前的版本




################################################################################
Kubernetes对象管理
- 命令行方式
kubectl run nginx --image nginx #或者
kubectl create deployment nginx --image nginx

- 指定文件配置
kubectl create -f nginx.yaml
kubectl delete -f nginx.yaml -f redis.yaml
kubectl replace -f nginx.yaml  #覆盖更新配置文件中定义的对象

- 声明式
kubectl apply -f configs/  #处理指定目录下所有对象配置文件
kubectl apply -R -f configs/  #递归处理目录


==============================================================================
https://kubernetes.io/zh/docs/concepts/

kubernetes概念学习:

1. kubernetes的control panel由运行在集群中的进程组成:
Master上：kube-apiserver、kube-controller-manager和kube-scheduler
Node上:kubelet负责和master节点通信、kube-proxy网络代理,将服务代理到节点上

2. kubernetes的对象
- pod
kubernetes的最小调度单位,一个pod代表一个进程,pod封装一个应用的一个或多个容器

- service
逻辑上抽象了一组pod和访问他们的策略(有时这些策略称为微服务),这些pod由service标记
通常是由selector决定的
service是一个Restful对象,可以POST一个service定义给API server来创建一个service
例如:
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app: MyApp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9376
	  
上述讲创建一个名为my-service的service对象,将请求代理到端口9376且标签app=MyApp的pod上
这个service被指派一个IP(ClusterIP),处理结果被POST到一个my-service的Endpoints对象上

kube-proxy为service实现了一种VIP,默认代理是iptables代理
service是4层TCP概念,新增的Ingress API用来表示7层HTTP服务	  

iptables代理模式:
kube-proxy会监视master对service对象和endpoint对象的添加和移除,每个service会安装iptables规则
每个endpoinits对象也会apply iptables规则

- volume
- namespace

- container:
kueberbetes使用controller去实现pod的扩容和自愈

replicaSet
deployment
statefulSet
daemonSet
job






















































